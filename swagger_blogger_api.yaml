swagger: "2.0"
info:
  description: "This is Alchemy blogger server.  You can find out more about us at our [ github](https://github.com/milind110/Alchemy)"
  version: "1.0.0"
  title: "Alchemy blogger"
  termsOfService: "http://swagger.io/terms/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/v1"
tags:
- name: "blog"
  description: "Everything about blogs"
- name: "users"
  description: "Operations about user"
schemes:
- "http"
paths:
  /blog:
    post:
      tags:
      - "blog"
      summary: "create a new blog"
      description: "User must be logged in to create a blog"
      operationId: "addBlog"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: "Authorization: Bearer <token>"
        description: " JWT returned on successful login"
        required: true
        type: string
      - in: "body"
        name: "body"
        description: "Blog object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/Blog"
      responses:
        405:
          description: "Invalid input"
#TODO need to add APIs to get blogs by pagination in guest mode. 
#TODO need to add API to get all blogs for a logged in user 
  /blog/{blogId}:
    get:
      tags:
      - "blog"
      summary: "Find blog by ID"
      description: "Returns a single blog"
      operationId: "getBlogById"
      produces:
      - "application/json"
      parameters:
      - name: "blogId"
        in: "path"
        description: "ID of blog to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Blog"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Blog not found"
    put:
      tags:
      - "blog"
      summary: "Update an existing blog"
      description: ""
      operationId: "updateBlog"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: "Authorization: Bearer <token>"
        description: " JWT returned on successful login"
        required: true
        type: string
      - in: "body"
        name: "body"
        description: "Blog object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Blog"
      - name: "blogId"
        in: "path"
        description: "ID of blog to return"
        required: true
        type: "integer"
        format: "int64"          
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Blog not found"
        405:
          description: "Validation exception"
#TODO the above means that blog can't be updated without first getting the contents. Is this OK? 
    delete:
      tags:
      - "blog"
      summary: "Deletes a blog"
      description: ""
      operationId: "deleteBlog"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: "Authorization: Bearer <token>"
        description: " JWT returned on successful login"
        required: true
        type: string      
      - name: "blogId"
        in: "path"
        description: "Blog id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Blog not found"
#TODO need to add comment handling APIs           
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Creates a new user in the blogging system"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
#TODO add the JWT in header so it can be used in all logged in user ops 
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      parameters:
      - in: header
        name: "Authorization: Bearer <token>"
        description: " JWT returned on successful login"
        required: true
        type: string
      tags:
      - "user"
      summary: "Logs out current logged in user"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: "Authorization: Bearer <token>"
        description: " JWT returned on successful login"
        required: true
        type: string
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: "Authorization: Bearer <token>"
        description: " JWT returned on successful login"
        required: true
        type: string
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: "Authorization: Bearer <token>"
        description: " JWT returned on successful login"
        required: true
        type: string
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
  Comment:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "my travels"
      createdOn:
        type: "string"
      lastUpdatedOn:
        type: "string"  
      author:
        type: "string"
      likes:
        type: "integer"
        format: "int64"   
  Blog:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "my travels"
      createdOn:
        type: "string"
      lastUpdatedOn:
        type: "string"  
      author:
        type: "string"
      likes:
        type: "integer"
        format: "int64"   
      comments:
        type: array
        items: 
          $ref: "#/definitions/Comment"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"